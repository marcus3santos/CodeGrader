(("folder" "~/lab08/") ("questions" ("q1" "q2" "q3"))
 ("fnames" (SUM-NODES COUNT-INTERNAL-NODES TREE-DEPTHS))
 ("q1"
  ("whats-asked"
   ("

** WHAT YOU ARE ASKED

*NOTE:* 

 - You are required to write the solutions for the parts of this question in the lisp program file *~/lab08/q1.lisp* .
 - You may create helper functions in your program file. 

 - To ensure your solution is in the correct folder and passes the test cases shown in the examples below, type the following expression on the REPL:
 
 (cg:chk-my-solution \"~/lab08/q1.lisp\")
 

Write a Common Lisp function called SUM-NODES that takes a tree as
input and returns the sum of all numeric node labels in the tree. If
the tree is empty, return 0. You may assume all node labels are either
symbols or numbers.

Examples:


The expression below
 
(SUM-NODES '(1 (2 (3) (4)) (5)))

should evaluate to

15

The expression below
 
(SUM-NODES '(A (1 (B) (2)) (C (3))))

should evaluate to

6

The expression below
 
(SUM-NODES 'NIL)

should evaluate to

0


"))
  NIL
  ("given" (DECLAIM (NOTINLINE SUM-NODES))
   (DEFTEST TEST-SUM-NODES NIL
    (CHECK (EQUALP (SUM-NODES '(1 (2 (3) (4)) (5))) 15)
     (EQUALP (SUM-NODES '(A (1 (B) (2)) (C (3)))) 6)
     (EQUALP (SUM-NODES 'NIL) 0)))
   (DEFUN TEST-Q1 () (TEST-SUM-NODES) (FMAKUNBOUND 'SUM-NODES)))
  NIL)
 ("q2"
  ("whats-asked"
   ("

** WHAT YOU ARE ASKED

*NOTE:* 

 - You are required to write the solutions for the parts of this question in the lisp program file *~/lab08/q2.lisp* .
 - You may create helper functions in your program file. 

 - To ensure your solution is in the correct folder and passes the test cases shown in the examples below, type the following expression on the REPL:
 
 (cg:chk-my-solution \"~/lab08/q2.lisp\")
 

Write a Common Lisp function called COUNT-INTERNAL-NODES that takes a tree as input and returns the number of internal nodes (nodes that have one or more children). A leaf node is a node with no children, and should not be counted.

Examples:


The expression below
 
(COUNT-INTERNAL-NODES '(A (B (C) (D)) (E)))

should evaluate to

2

The expression below
 
(COUNT-INTERNAL-NODES '(X))

should evaluate to

0

The expression below
 
(COUNT-INTERNAL-NODES 'NIL)

should evaluate to

0


"))
  NIL
  ("given" (DECLAIM (NOTINLINE COUNT-INTERNAL-NODES))
   (DEFTEST TEST-COUNT-INTERNAL-NODES NIL
    (CHECK (EQUALP (COUNT-INTERNAL-NODES '(A (B (C) (D)) (E))) 2)
     (EQUALP (COUNT-INTERNAL-NODES '(X)) 0)
     (EQUALP (COUNT-INTERNAL-NODES 'NIL) 0)))
   (DEFUN TEST-Q2 ()
     (TEST-COUNT-INTERNAL-NODES)
     (FMAKUNBOUND 'COUNT-INTERNAL-NODES)))
  NIL)
 ("q3"
  ("whats-asked"
   ("

** WHAT YOU ARE ASKED

*NOTE:* 

 - You are required to write the solutions for the parts of this question in the lisp program file *~/lab08/q3.lisp* .
 - You may create helper functions in your program file. 

 - To ensure your solution is in the correct folder and passes the test cases shown in the examples below, type the following expression on the REPL:
 
 (cg:chk-my-solution \"~/lab08/q3.lisp\")
 

Write a Common Lisp function called TREE-DEPTHS that takes a tree as input and returns a list of the depths of all leaf nodes. The root has depth 0, its children have depth 1, and so on.

Examples:


The expression below
 
(TREE-DEPTHS '(A (B (C) (D)) (E)))

should evaluate to

(2 2 1)

The expression below
 
(TREE-DEPTHS '(X))

should evaluate to

(0)

The expression below
 
(TREE-DEPTHS 'NIL)

should evaluate to

NIL


"))
  NIL
  ("given" (DECLAIM (NOTINLINE TREE-DEPTHS))
   (DEFTEST TEST-TREE-DEPTHS NIL
    (CHECK (EQUALP (TREE-DEPTHS '(A (B (C) (D)) (E))) '(2 2 1))
     (EQUALP (TREE-DEPTHS '(X)) '(0)) (EQUALP (TREE-DEPTHS 'NIL) 'NIL)))
   (DEFUN TEST-Q3 () (TEST-TREE-DEPTHS) (FMAKUNBOUND 'TREE-DEPTHS)))
  NIL))