(("folder" "~/lab05/") ("questions" ("q1" "q2"))
 ("fnames"
  (SEARCH-FOR-POINT *FREE-INDEX* *CELL-ARRAY* MAKE-EMPTY-LIST ALLOCATE-CELL
   MY-CONS MY-CAR MY-CDR))
 ("q1"
  ("whats-asked"
   ("

** WHAT YOU ARE ASKED

*NOTE:* 

 - You are required to write the solutions for the parts of this question in the lisp program file *~/lab05/q1.lisp* .
 - You may create helper functions in your program file. 

 - To ensure your solution is in the correct folder and passes the test cases shown in the examples below, type the following expression on the REPL:
 
 (cg:chk-my-solution \"~/lab05/q1.lisp\")
 

Write a function called SEARCH-FOR-POINT that takes a list of point lists (e.g., '((1 2) (3 4) (5 6))) and a target point list (e.g., '(3 4)) as arguments. The function should return the 0-based index of the *first* occurrence of the target point in the list of points. If the target point is not found, the function should return NIL.

You should consider two points to be equal if their x-coordinates and y-coordinates are both equal. You may find it helpful to reuse or adapt concepts from Lab 4 regarding point manipulation.


The expression below
 
(SEARCH-FOR-POINT '((10 20) (30 40) (50 60)) '(30 40))

should evaluate to

1

The expression below
 
(SEARCH-FOR-POINT '((1 1) (2 2) (3 3)) '(4 4))

should evaluate to

NIL

The expression below
 
(SEARCH-FOR-POINT '((0 0) (1 1) (0 0)) '(0 0))

should evaluate to

0

The expression below
 
(SEARCH-FOR-POINT 'NIL '(1 2))

should evaluate to

NIL

The expression below
 
(SEARCH-FOR-POINT '((7 8)) '(7 8))

should evaluate to

0

The expression below
 
(SEARCH-FOR-POINT '((1 2) (3 4) (1 2)) '(1 2))

should evaluate to

0


"))
  NIL
  ("given" (DECLAIM (NOTINLINE SEARCH-FOR-POINT))
   (DEFTEST TEST-SEARCH-FOR-POINT NIL
    (CHECK (EQUALP (SEARCH-FOR-POINT '((10 20) (30 40) (50 60)) '(30 40)) 1)
     (EQUALP (SEARCH-FOR-POINT '((1 1) (2 2) (3 3)) '(4 4)) NIL)
     (EQUALP (SEARCH-FOR-POINT '((0 0) (1 1) (0 0)) '(0 0)) 0)
     (EQUALP (SEARCH-FOR-POINT 'NIL '(1 2)) NIL)
     (EQUALP (SEARCH-FOR-POINT '((7 8)) '(7 8)) 0)
     (EQUALP (SEARCH-FOR-POINT '((1 2) (3 4) (1 2)) '(1 2)) 0)))
   (DEFUN TEST-Q1 () (TEST-SEARCH-FOR-POINT) (FMAKUNBOUND 'SEARCH-FOR-POINT)))
  NIL)
 ("q2"
  ("whats-asked"
   ("

** WHAT YOU ARE ASKED

*NOTE:* 

 - You are required to write the solutions for the parts of this question in the lisp program file *~/lab05/q2.lisp* .
 - You may create helper functions in your program file. 

 - To ensure your solution is in the correct folder and passes the test cases shown in the examples below, type the following expression on the REPL:
 
 (cg:chk-my-solution \"~/lab05/q2.lisp\")
 

*Provided:*

You are provided with a global backing array (~*CELL-ARRAY*~) of fixed size that holds the cons cells, and a variable (~*FREE-INDEX*~) that tracks the next available index.

The following code sets up the backing store and provides two utility functions:


(defparameter *array-size* 100)
(defparameter *cell-array* (make-array *array-size* :initial-element nil))
(defparameter *free-index* 0)

(defun allocate-cell (data next-index)
 (if (>= *free-index* *array-size*)
 (error \"Backing array is full.\")
 (let ((index *free-index*))
 (setf (aref *cell-array* index) (vector data next-index))
 (incf *free-index*)
 index)))

(defun make-empty-list ()
 (vector nil 0))


*Part 1:*

Implement a function MY-CONS that takes a number item and a list (a two-element array), and:

 - Calls ALLOCATE-CELL to create a new cons cell with item as the data and the current head as the link.
 - Update the list's head to the new cell's index.
 - Increment the list's size by 1.
 - Return the modified list.
 For example: 


The expression below
 
(LET* ((*FREE-INDEX* 0)
 (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
 (LST (MAKE-EMPTY-LIST)))
 (MY-CONS 10 LST)
 (AREF (AREF *CELL-ARRAY* (AREF LST 0)) 0))

should evaluate to

10

The expression below
 
(LET* ((*FREE-INDEX* 0)
 (*CELL-ARRAY* (MAKE-ARRAY 3 :INITIAL-ELEMENT NIL))
 (LST (MAKE-EMPTY-LIST))
 (NEWLST (MY-CONS 10 (MY-CONS 20 LST))))
 (AREF NEWLST 1))

should evaluate to

2

The expression below
 
(LET* ((*FREE-INDEX* 0)
 (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
 (LST (MAKE-EMPTY-LIST))
 (NEW (MY-CONS 12 (MY-CONS 42 (MY-CONS 7 LST)))))
 NEW)

should evaluate to

#(2 3)



*Part 2:*

Implement a function MY-CAR that takes a list (two-element array) and returns the data stored in its head node.

If the list is empty (i.e., the head is NIL), MY-CAR must return NIL.

 For example:


The expression below
 
(LET* ((*FREE-INDEX* 0)
 (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
 (LST (MAKE-EMPTY-LIST)))
 (MY-CAR LST))

should evaluate to

NIL

The expression below
 
(LET* ((*FREE-INDEX* 0)
 (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
 (I (ALLOCATE-CELL 99 NIL))
 (LST (MAKE-EMPTY-LIST)))
 (SETF (AREF LST 0) I
 (AREF LST 1) 1)
 (MY-CAR LST))

should evaluate to

99

The expression below
 
(LET* ((*FREE-INDEX* 0)
 (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
 (N0 (ALLOCATE-CELL 2 NIL))
 (N1 (ALLOCATE-CELL 3 N0))
 (LST (MAKE-EMPTY-LIST)))
 (SETF (AREF LST 0) N1
 (AREF LST 1) 2)
 (MY-CAR LST))

should evaluate to

3



*Part 3:*

Write a function `(MY-CDR list)` that returns a new list with the head moved to the next cons cell.

 - If the list is empty (i.e., the head is NIL), return a new empty list.
 - Otherwise, update the list's head to the index stored in the link part of the current head cell.
 - Decrement the list's size by 1.
 - Return the modified list.

The expression below
 
(LET* ((*FREE-INDEX* 0)
 (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
 (N0 (ALLOCATE-CELL 1 NIL))
 (N1 (ALLOCATE-CELL 2 N0))
 (N2 (ALLOCATE-CELL 3 N1))
 (LST (MAKE-EMPTY-LIST))
 (TAIL
 (PROGN
 (SETF (AREF LST 0) N2
 (AREF LST 1) 3)
 (MY-CDR LST))))
 (AREF (AREF *CELL-ARRAY* (AREF TAIL 0)) 0))

should evaluate to

2

The expression below
 
(LET* ((*FREE-INDEX* 0)
 (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
 (N0 (ALLOCATE-CELL 1 NIL))
 (N1 (ALLOCATE-CELL 2 N0))
 (N2 (ALLOCATE-CELL 3 N1))
 (LST (MAKE-EMPTY-LIST))
 (TAIL
 (PROGN
 (SETF (AREF LST 0) N2
 (AREF LST 1) 3)
 (MY-CDR LST))))
 TAIL)

should evaluate to

#(1 2)

The expression below
 
(LET* ((*FREE-INDEX* 0)
 (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
 (N0 (ALLOCATE-CELL 5 NIL))
 (LST (MAKE-EMPTY-LIST)))
 (MY-CDR LST))

should evaluate to

#(NIL 0)

The expression below
 
(LET* ((*FREE-INDEX* 0)
 (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
 (N1 (ALLOCATE-CELL 2 NIL))
 (N2 (ALLOCATE-CELL 3 N1))
 (LST (MAKE-EMPTY-LIST)))
 (SETF (AREF LST 0) N2
 (AREF LST 1) 2)
 (MY-CDR (MY-CDR LST)))

should evaluate to

#(NIL 0)


"))
  NIL
  ("given" (DECLAIM (NOTINLINE MY-CONS MY-CAR MY-CDR))
   (DEFTEST TEST-MY-CONS NIL
    (CHECK
     (EQUALP
      (LET* ((*FREE-INDEX* 0)
             (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
             (LST (MAKE-EMPTY-LIST)))
        (MY-CONS 10 LST)
        (AREF (AREF *CELL-ARRAY* (AREF LST 0)) 0))
      10)
     (EQUALP
      (LET* ((*FREE-INDEX* 0)
             (*CELL-ARRAY* (MAKE-ARRAY 3 :INITIAL-ELEMENT NIL))
             (LST (MAKE-EMPTY-LIST))
             (NEWLST (MY-CONS 10 (MY-CONS 20 LST))))
        (AREF NEWLST 1))
      2)
     (EQUALP
      (LET* ((*FREE-INDEX* 0)
             (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
             (LST (MAKE-EMPTY-LIST))
             (NEW (MY-CONS 12 (MY-CONS 42 (MY-CONS 7 LST)))))
        NEW)
      #(2 3))))
   (DEFTEST TEST-MY-CAR NIL
    (CHECK
     (EQUALP
      (LET* ((*FREE-INDEX* 0)
             (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
             (LST (MAKE-EMPTY-LIST)))
        (MY-CAR LST))
      NIL)
     (EQUALP
      (LET* ((*FREE-INDEX* 0)
             (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
             (I (ALLOCATE-CELL 99 NIL))
             (LST (MAKE-EMPTY-LIST)))
        (SETF (AREF LST 0) I
              (AREF LST 1) 1)
        (MY-CAR LST))
      99)
     (EQUALP
      (LET* ((*FREE-INDEX* 0)
             (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
             (N0 (ALLOCATE-CELL 2 NIL))
             (N1 (ALLOCATE-CELL 3 N0))
             (LST (MAKE-EMPTY-LIST)))
        (SETF (AREF LST 0) N1
              (AREF LST 1) 2)
        (MY-CAR LST))
      3)))
   (DEFTEST TEST-MY-CDR NIL
    (CHECK
     (EQUALP
      (LET* ((*FREE-INDEX* 0)
             (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
             (N0 (ALLOCATE-CELL 1 NIL))
             (N1 (ALLOCATE-CELL 2 N0))
             (N2 (ALLOCATE-CELL 3 N1))
             (LST (MAKE-EMPTY-LIST))
             (TAIL
              (PROGN
               (SETF (AREF LST 0) N2
                     (AREF LST 1) 3)
               (MY-CDR LST))))
        (AREF (AREF *CELL-ARRAY* (AREF TAIL 0)) 0))
      2)
     (EQUALP
      (LET* ((*FREE-INDEX* 0)
             (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
             (N0 (ALLOCATE-CELL 1 NIL))
             (N1 (ALLOCATE-CELL 2 N0))
             (N2 (ALLOCATE-CELL 3 N1))
             (LST (MAKE-EMPTY-LIST))
             (TAIL
              (PROGN
               (SETF (AREF LST 0) N2
                     (AREF LST 1) 3)
               (MY-CDR LST))))
        TAIL)
      #(1 2))
     (EQUALP
      (LET* ((*FREE-INDEX* 0)
             (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
             (N0 (ALLOCATE-CELL 5 NIL))
             (LST (MAKE-EMPTY-LIST)))
        (MY-CDR LST))
      #(NIL 0))
     (EQUALP
      (LET* ((*FREE-INDEX* 0)
             (*CELL-ARRAY* (MAKE-ARRAY 5 :INITIAL-ELEMENT NIL))
             (N1 (ALLOCATE-CELL 2 NIL))
             (N2 (ALLOCATE-CELL 3 N1))
             (LST (MAKE-EMPTY-LIST)))
        (SETF (AREF LST 0) N2
              (AREF LST 1) 2)
        (MY-CDR (MY-CDR LST)))
      #(NIL 0))))
   (DEFUN TEST-Q2 ()
     (TEST-MY-CDR)
     (TEST-MY-CAR)
     (TEST-MY-CONS)
     (FMAKUNBOUND 'MY-CDR)
     (FMAKUNBOUND 'MY-CAR)
     (FMAKUNBOUND 'MY-CONS)))
  NIL))