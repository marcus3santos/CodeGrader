(("folder" "~/lab07/") ("questions" ("q1" "q2" "q3"))
 ("fnames"
  (ENTER-SALES-REPORT UPDATE-PRODUCT-SALES BEST-SELLING-PRODUCT TOTAL-SALES))
 ("q1"
  ("whats-asked"
   ("

** WHAT YOU ARE ASKED

*NOTE:* 

 - You are required to write the solutions for the parts of this question in the lisp program file *~/lab07/q1.lisp* .
 - You may create helper functions in your program file. 

 - To ensure your solution is in the correct folder and passes the test cases shown in the examples below, type the following expression on the REPL:
 
 (cg:chk-my-solution \"~/lab07/q1.lisp\")
 

*Part 1:*

Write a Common Lisp function called ENTER-SALES-REPORT that takes a list of sales data as input. Each element in the list is a sublist containing a product name (a string) and a sales amount (an integer). Assume there are no repeated products in the list.

Here is an example of a sales report: ~((\"Apple\" 100) (\"Orange\" 50) (\"Banana\" 150))~

The function should return a hash table where each key is a product name and the corresponding value is the sales amount for that product. For example:


The expression below
 
(LET* ((SALES-DATA '((\"Apple\" 100) (\"Orange\" 50) (\"Banana\" 150)))
 (HT (ENTER-SALES-REPORT SALES-DATA)))
 (AND (EQUALP (GETHASH \"Apple\" HT) 100) (EQUALP (GETHASH \"Orange\" HT) 50)
 (EQUALP (GETHASH \"Banana\" HT) 150) (= (HASH-TABLE-COUNT HT) 3)))

should evaluate to

T



*HINT*: To use the product name (a string) as key, you will need to set the an appropriate comparison operator when creating the hash table, as follows ~(make-hash-table :test 'equal)~

*Part 2:*

Write a function called UPDATE-PRODUCT-SALES that takes (1) a hash table containing the product and amount as entered by the function above, (2) a string representing a product name, and (3) a product sales amount. The function should aggregate the input amount to the stored amount. If the product is not in the hash table, it should enter the respective product and amount and return a hash table where each key is a product name and the corresponding value is the total sales for that product. For example:


The expression below
 
(LET* ((HT (MAKE-HASH-TABLE :TEST 'EQUAL)))
 (SETF (GETHASH \"Apple\" HT) 100)
 (SETF (GETHASH \"Orange\" HT) 200)
 (UPDATE-PRODUCT-SALES HT \"Orange\" 50)
 (AND (EQUALP (GETHASH \"Apple\" HT) 100) (EQUALP (GETHASH \"Orange\" HT) 250)
 (= (HASH-TABLE-COUNT HT) 2)))

should evaluate to

T

The expression below
 
(LET* ((HT (MAKE-HASH-TABLE :TEST 'EQUAL)))
 (SETF (GETHASH \"Apple\" HT) 100)
 (SETF (GETHASH \"Orange\" HT) 200)
 (UPDATE-PRODUCT-SALES HT \"Grapes\" 50)
 (AND (EQUALP (GETHASH \"Apple\" HT) 100) (EQUALP (GETHASH \"Orange\" HT) 200)
 (EQUALP (GETHASH \"Grapes\" HT) 50) (= (HASH-TABLE-COUNT HT) 3)))

should evaluate to

T


"))
  NIL
  ("given" (DECLAIM (NOTINLINE ENTER-SALES-REPORT UPDATE-PRODUCT-SALES))
   (DEFTEST TEST-ENTER-SALES-REPORT NIL
    (CHECK
     (EQUALP
      (LET* ((SALES-DATA '(("Apple" 100) ("Orange" 50) ("Banana" 150)))
             (HT (ENTER-SALES-REPORT SALES-DATA)))
        (AND (EQUALP (GETHASH "Apple" HT) 100)
             (EQUALP (GETHASH "Orange" HT) 50)
             (EQUALP (GETHASH "Banana" HT) 150) (= (HASH-TABLE-COUNT HT) 3)))
      T)))
   (DEFTEST TEST-UPDATE-PRODUCT-SALES NIL
    (CHECK
     (EQUALP
      (LET* ((HT (MAKE-HASH-TABLE :TEST 'EQUAL)))
        (SETF (GETHASH "Apple" HT) 100)
        (SETF (GETHASH "Orange" HT) 200)
        (UPDATE-PRODUCT-SALES HT "Orange" 50)
        (AND (EQUALP (GETHASH "Apple" HT) 100)
             (EQUALP (GETHASH "Orange" HT) 250) (= (HASH-TABLE-COUNT HT) 2)))
      T)
     (EQUALP
      (LET* ((HT (MAKE-HASH-TABLE :TEST 'EQUAL)))
        (SETF (GETHASH "Apple" HT) 100)
        (SETF (GETHASH "Orange" HT) 200)
        (UPDATE-PRODUCT-SALES HT "Grapes" 50)
        (AND (EQUALP (GETHASH "Apple" HT) 100)
             (EQUALP (GETHASH "Orange" HT) 200)
             (EQUALP (GETHASH "Grapes" HT) 50) (= (HASH-TABLE-COUNT HT) 3)))
      T)))
   (DEFUN TEST-Q1 ()
     (TEST-UPDATE-PRODUCT-SALES)
     (TEST-ENTER-SALES-REPORT)
     (FMAKUNBOUND 'UPDATE-PRODUCT-SALES)
     (FMAKUNBOUND 'ENTER-SALES-REPORT)))
  NIL)
 ("q2"
  ("whats-asked"
   ("

** WHAT YOU ARE ASKED

*NOTE:* 

 - You are required to write the solutions for the parts of this question in the lisp program file *~/lab07/q2.lisp* .
 - You may create helper functions in your program file. 

 - To ensure your solution is in the correct folder and passes the test cases shown in the examples below, type the following expression on the REPL:
 
 (cg:chk-my-solution \"~/lab07/q2.lisp\")
 

Write a Common Lisp function called BEST-SELLING-PRODUCT that takes a hash table containing product names as keys and their sales amounts as values, and returns the product with the highest sales. The function should return two values: the product name (a string) and its sales amount (an integer).

For example, given a hash table where ~\"Apple\" 100~, ~\"Orange\" 250~, and ~\"Banana\" 150~, the function should return ~\"Orange\"~ and ~250~.


The expression below
 
(LET* ((HT (MAKE-HASH-TABLE :TEST 'EQUAL)))
 (SETF (GETHASH \"Apple\" HT) 100)
 (SETF (GETHASH \"Orange\" HT) 250)
 (SETF (GETHASH \"Banana\" HT) 150)
 (MULTIPLE-VALUE-BIND (PRODUCT SALES)
 (BEST-SELLING-PRODUCT HT)
 (AND (EQUALP PRODUCT \"Orange\") (= SALES 250))))

should evaluate to

T


"))
  NIL
  ("given" (DECLAIM (NOTINLINE BEST-SELLING-PRODUCT))
   (DEFTEST TEST-BEST-SELLING-PRODUCT NIL
    (CHECK
     (EQUALP
      (LET* ((HT (MAKE-HASH-TABLE :TEST 'EQUAL)))
        (SETF (GETHASH "Apple" HT) 100)
        (SETF (GETHASH "Orange" HT) 250)
        (SETF (GETHASH "Banana" HT) 150)
        (MULTIPLE-VALUE-BIND (PRODUCT SALES)
            (BEST-SELLING-PRODUCT HT)
          (AND (EQUALP PRODUCT "Orange") (= SALES 250))))
      T)))
   (DEFUN TEST-Q2 ()
     (TEST-BEST-SELLING-PRODUCT)
     (FMAKUNBOUND 'BEST-SELLING-PRODUCT)))
  NIL)
 ("q3"
  ("whats-asked"
   ("

** WHAT YOU ARE ASKED

*NOTE:* 

 - You are required to write the solutions for the parts of this question in the lisp program file *~/lab07/q3.lisp* .
 - You may create helper functions in your program file. 

 - To ensure your solution is in the correct folder and passes the test cases shown in the examples below, type the following expression on the REPL:
 
 (cg:chk-my-solution \"~/lab07/q3.lisp\")
 

Write a Common Lisp function called TOTAL-SALES that takes a hash table containing product names as keys and their sales amounts as values, and returns the total sales amount across all products.

For example, given a hash table where ~\"Apple\" 100~, ~\"Orange\" 250~, and ~\"Banana\" 150~, the function should return ~500~.


The expression below
 
(LET* ((HT (MAKE-HASH-TABLE :TEST 'EQUAL)))
 (SETF (GETHASH \"Apple\" HT) 100)
 (SETF (GETHASH \"Orange\" HT) 250)
 (SETF (GETHASH \"Banana\" HT) 150)
 (= (TOTAL-SALES HT) 500))

should evaluate to

T


"))
  NIL
  ("given" (DECLAIM (NOTINLINE TOTAL-SALES))
   (DEFTEST TEST-TOTAL-SALES NIL
    (CHECK
     (EQUALP
      (LET* ((HT (MAKE-HASH-TABLE :TEST 'EQUAL)))
        (SETF (GETHASH "Apple" HT) 100)
        (SETF (GETHASH "Orange" HT) 250)
        (SETF (GETHASH "Banana" HT) 150)
        (= (TOTAL-SALES HT) 500))
      T)))
   (DEFUN TEST-Q3 () (TEST-TOTAL-SALES) (FMAKUNBOUND 'TOTAL-SALES)))
  NIL))