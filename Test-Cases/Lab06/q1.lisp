;; q1.lisp

(deftest test-next ()
    (check
      (equal (let ((std  '((1 . 2) (2 . (3 4)) (3 . nil) (4 . nil))))
	       (next std 2))
	     '(3 4))
      (equal (let ((std  '((1 . 2) (2 . (3 4)) (3 . nil) (4 . nil))))
	       (next std 1))
	     2)
      (equal (let ((std  '((1 . 2) (2 . (3 4)) (3 . nil) (4 . nil))))
	       (next std 3))
	     nil)
      (equal (let ((std  '((start . test1)    
                           (test1 . (init end1))
                           (init . test2)
                           (test2 . (bdy return))
                           (bdy . incr)
                           (incr . test2)
                           (return . end1)
                           (end1 . nil))))
	       (next std 'init))
	     'test2)))

(deftest test-jump ()
    (check
      (equal (let ((std '((start . test1)    
			  (test1 . (init end1))
			  (init . test2)
			  (test2 . (bdy return))
			  (bdy . incr)
			  (incr . test2)
			  (return . end1)
			  (end1 . nil))))
	       (jump std 'init 'test1))
	     'test2)
      (equal (let ((std '((start . test1)    
			  (test1 . (init end1))
			  (init . test2)
			  (test2 . (bdy return))
			  (bdy . incr)
			  (incr . test2)
			  (return . end1)
			  (end1 . nil))))
	       (jump std 'test2 'incr))
	     '(bdy return))
       (equal (let ((std '((start . test1)    
			  (test1 . (init end1))
			  (init . test2)
			  (test2 . (bdy return))
			  (bdy . incr)
			  (incr . test2)
			  (return . end1)
			  (end1 . nil))))
		(jump std nil 'return))
	      'return)
      (equal (let ((std '((1 . 2)    
			  (2 . (3 4))
			  (3 . nil)
			  (4 . nil))))
	       (jump std 3 2))
	     2)))

(deftest test-next-fork ()
  (check
    (equal (let ((std '((1 . 2)    
			(2 . (3 4))
			(3 . nil)
			(4 . nil))))
	     (next-fork std 1))
	   '(3 4))
    (equal (let ((std '((1 . 2)    
			(2 . (3 4))
			(3 . nil)
			(4 . nil))))
	     (next-fork std 3))
	   nil)
    (equal (let ((std '((1 . 2)    
			(2 . (3 4))
			(3 . 1)
			(4 . nil))))
	     (next-fork std 3))
	   '(3 4))
    (equal (let ((std '((start . test1)    
			(test1 . (init end1))
			(init . test2)
			(test2 . (bdy return))
			(bdy . incr)
			(incr . test2)
			(return . end1)
			(end1 . nil))))
	     (next-fork std 'bdy))
	   '(bdy return))))

(defun test-q1 ()
  (test-next-fork)
  (test-jump)
  (test-next)
  (fmakunbound 'jump)
  (fmakunbound 'next)
  (fmakunbound 'next-fork))

(test-q1)
