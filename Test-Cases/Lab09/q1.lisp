;; q1.lisp

(deftest test-depth-first-traversal ()
  (check
    (equal (let ((g '((1 2))))
	     (depth-first-traversal g 1))
	   (list 1 2))
    (equal (let ((g '((1 2) (2 3))))
	     (depth-first-traversal g 1))
	   (list 1 2 3))
    (equal (let ((g '((1 2))))
	     (depth-first-traversal g 1))
	   (list 1 2))
    (equal (let ((g '((1 2 3) (2 3 4) (3 5))))
	     (depth-first-traversal g 2))
	   (list 2 3 5))
    (equal (let ((g '((1 1))))
	     (depth-first-traversal g 1))
	   (list 1))
    (equal (let ((g '((1 2) (2 1))))
	     (depth-first-traversal g 2))
	   (list 2 1))
    (equal (let ((g '((1 2) (2 4 3))))
	     (depth-first-traversal g 2))
	   (list 2 4))
    (equal (let ((g '((1 2 3) (2 3) (3 4 2))))
             (depth-first-traversal g 4))
           (list 4))
    (equal (let ((g '((1 2 4) (2 3) (3 4 2))))
             (depth-first-traversal g 2))
           (list 2 3 4))))


(defun test-q1 ()
  (test-depth-first-traversal)
  (fmakunbound 'depth-first-traversal))

(test-q1)
