;; q1.lisp

(deftest test-stack ()
  (check
    (equal (let ((stack (create-stack)))
             (stack-empty? stack))
           T)
    (equal (let ((stack (create-stack)))
             (setf stack (stack-push stack 5))
             (setf stack (stack-push stack 10))
             (setf stack (stack-push stack 15))
             (stack-empty? stack))
           NIL)
    (equal (let ((stack (create-stack)))
             (setf stack (stack-push stack 5))
             (setf stack (stack-push stack 10))
             (setf stack (stack-push stack 15))
             (stack-top stack))
           15)
    (equal (let ((stack (create-stack)))
             (setf stack (stack-push stack 5))
             (setf stack (stack-push stack 10))
             (setf stack (stack-push stack 15))
             (stack-pop stack))
           15)
    (equal (let ((stack (create-stack)))
             (setf stack (stack-push stack 5))
             (setf stack (stack-push stack 10))
             (setf stack (stack-push stack 15))
             (stack-pop stack)
             (stack-pop stack))
           10)
    (equal (let ((stack (create-stack)))
             (setf stack (stack-push stack 5))
             (setf stack (stack-push stack 10))
             (setf stack (stack-push stack 15))
             (stack-pop stack)
             (stack-pop stack)
             (stack-pop stack)
             (stack-pop stack))
           NIL)
    (equal (let ((stack (create-stack)))
             (setf stack (stack-push stack 5))
             (setf stack (stack-push stack 10))
             (setf stack (stack-push stack 15))
             (stack-pop stack)
             (stack-pop stack)
             (stack-pop stack)
             (stack-empty? stack))
           T)))

(defun test-q1 ()
  (test-stack)
  (fmakunbound 'stack-empty?)
  (fmakunbound 'stack-pop)
  (fmakunbound 'stack-top)
  (fmakunbound 'stack-push))

(test-q1)

