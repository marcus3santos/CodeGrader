(defstruct movie
  title  director year type)

(defvar database nil)

(defun arrays-equal-p (array1 array2)
  (and (equal (array-dimensions array1)
              (array-dimensions array2))
       (loop for i below (array-total-size array1)
             always (equalp (aref array1 i)
                            (aref array2 i)))))

(deftest test-add-movie ()
    (check
      (arrays-equal-p (let ((database (make-array 4 :initial-element nil)))
                        (add-movie (make-movie :title "Blade Runner") database))
                      (vector #S(MOVIE :TITLE "Blade Runner" :DIRECTOR NIL :YEAR NIL :TYPE NIL) NIL NIL NIL))
      (arrays-equal-p (let ((database (make-array 4 :initial-element nil)))
                        (add-movie (make-movie :title "Blade Runner") database)
                        (add-movie (make-movie :title "Inception") database))
                      (vector #S(MOVIE :TITLE "Blade Runner" :DIRECTOR NIL :YEAR NIL :TYPE NIL)
                              #S(MOVIE :TITLE "Inception" :DIRECTOR NIL :YEAR NIL :TYPE NIL) NIL NIL))
      (arrays-equal-p (let ((database (make-array 4 :initial-element nil)))
                        (add-movie (make-movie :title "Blade Runner") database)
                        (add-movie (make-movie :title "Inception") database)
                        (add-movie (make-movie :title "The Matrix") database))
                      (vector #S(MOVIE :TITLE "Blade Runner" :DIRECTOR NIL :YEAR NIL :TYPE NIL)
                              #S(MOVIE :TITLE "Inception" :DIRECTOR NIL :YEAR NIL :TYPE NIL)
                              #S(MOVIE :TITLE "The Matrix" :DIRECTOR NIL :YEAR NIL :TYPE NIL) NIL))
      (equal (let ((database (make-array 4 :initial-element nil)))
               (add-movie (make-movie :title "Blade Runner") database)
               (add-movie (make-movie :title "Inception") database)
               (add-movie (make-movie :title "The Matrix") database)
               (add-movie (make-movie :title "Blade Runner 2046") database)
               (add-movie (make-movie :title "Interstellar") database))
             nil)))

(deftest test-delete-movie ()
  (check
    (arrays-equal-p (progn
                      (setf database (make-array 4 :initial-element nil))
                      (setf (aref database 0) (make-movie :title "Blade Runner"))
                      (setf (aref database 1) (make-movie :title "Inception"))
                      (setf (aref database 2) (make-movie :title "The Matrix"))
                      (delete-movie "Blade Runner" database))
                    (vector NIL #S(MOVIE :TITLE "Inception" :DIRECTOR NIL :YEAR NIL :TYPE NIL)
                            #S(MOVIE :TITLE "The Matrix" :DIRECTOR NIL :YEAR NIL :TYPE NIL) NIL))
    (arrays-equal-p (let ((database (make-array 4 :initial-element nil)))
                      (setf (aref database 0) (make-movie :title "Blade Runner"))
                      (setf (aref database 1) (make-movie :title "Inception"))
                      (setf (aref database 2) (make-movie :title "The Matrix"))
                      (delete-movie "Blade Runner" database)               
                      (delete-movie "The Matrix" database))
                    (let ((res (make-array 4 :initial-element NIL)))
                      (setf (aref res 0) nil)
                      (setf (aref res 1) (make-movie :title "Inception"))
                      res))
    (arrays-equal-p (let ((database (make-array 4 :initial-element nil)))
                      (setf (aref database 0) (make-movie :title "Blade Runner"))
                      (setf (aref database 1) (make-movie :title "Inception"))
                      (setf (aref database 2) (make-movie :title "The Matrix"))
                      (delete-movie "Blade Runner" database)               
                      (delete-movie "The Matrix" database)
                      (delete-movie "Inception" database))             
                    (vector NIL NIL NIL NIL))
    (equal (let ((database (make-array 4 :initial-element nil)))
             (delete-movie "Interstellar" database))
           NIL)))

(deftest test-num-movies ()
    (check
      (equal (let ((database (make-array 4 :initial-element nil)))
               (setf (aref database 0) (make-movie :title "Blade Runner"))
               (setf (aref database 1) (make-movie :title "Inception"))
               (setf (aref database 2) (make-movie :title "The Matrix"))
               (num-movies database))
             3)
      (equal (num-movies (make-array 10 :initial-element nil)) 0)
      (equal (let ((database (make-array 10 :initial-element nil)))
               (setf (aref database 3) (make-movie :title "Blade Runner"))
               (num-movies database))
             1)))

  
(defun test-q1 ()
  (test-num-movies)
  (test-delete-movie)
  (test-add-movie)
  (fmakunbound 'num-movies)
  (fmakunbound 'delete-movie)
  (fmakunbound 'add-movie))

(test-q1)
