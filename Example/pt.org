#+Title: Common Lisp Practicum Test
#+Options: toc:nil num:nil date:nil author:nil

* Questions
** Question 1
 
Note: 
- Save your solution in the folder: =~/pt/=
- In the parts of this question, you are not allowed to use or refer to the following Lisp functions and symbols: COUNT, APPLY

#+forbidden: (0.9 count apply)

- **Part 1:** Write a function =count-occurrences= that takes an element and a list as arguments and returns the number of times the element appears in the list. You may not use the =COUNT= function.

#+begin_example
(deftest count-occurrences
  (count-occurrences 3 '(1 2 3 3 3 4)) 3
  (count-occurrences 'a '(a b a c a)) 3
  (count-occurrences 5 '(1 2 3 4)) 0)
#+end_example

- **Part 2:** Write a function =contains-all?= that takes two lists as arguments and returns =T= if all elements of the first list are contained in the second list, and =NIL= otherwise.

#+begin_example
(deftest contains-all
  (contains-all? '(1 2) '(1 2 3 4)) t
  (contains-all? '(1 5) '(1 2 3 4)) nil
  (contains-all? '() '(1 2 3)) t)
#+end_example

#+begin_tcs
(deftest count-occurrences
    (count-occurrences 1 '(1 1 1 1 1)) 5
    (count-occurrences 0 '(1 2 3 4)) 0
    (count-occurrences 'z '(a b c z z)) 2)

(deftest contains-all
    (contains-all? '(a b) '(a b c d e)) t
    (contains-all? '(a z) '(a b c d)) nil
    (contains-all? '() '()) t)
#+end_tcs

** Question 2

Note: 
- Save your solution in the folder: =~/pt/=
- In the parts of this question, you are not allowed to use or refer to the following Lisp functions and symbols: REVERSE, NREVERSE

#+forbidden: (0.9 reverse nreverse)

- **Part 1:** Write a function =reverse-list= that takes a list as an argument and returns a new list that is the reverse of the original list. You may not use =REVERSE= or =NREVERSE=.

#+begin_example
(deftest reverse-list
  (reverse-list '(1 2 3 4)) '(4 3 2 1)
  (reverse-list '(a b c)) '(c b a)
  (reverse-list '()) '())
#+end_example

- **Part 2:** Write a function =palindrome?= that takes a list as an argument and returns =T= if the list is a palindrome (reads the same forwards and backwards), and =NIL= otherwise. You may not use =REVERSE= or =NREVERSE=.

#+begin_example
(deftest palindrome
  (palindrome? '(1 2 3 2 1)) t
  (palindrome? '(a b c d)) nil
  (palindrome? '()) t)
#+end_example

#+begin_tcs
(deftest reverse-list
    (reverse-list '(1 2 3 4 5)) '(5 4 3 2 1)
    (reverse-list '()) '()
    (reverse-list '(a b c)) '(c b a))

(deftest palindrome
    (palindrome? '(x y x)) t
    (palindrome? '(x y z)) nil
    (palindrome? '()) t)
#+end_tcs

