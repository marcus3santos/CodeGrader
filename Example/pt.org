#+Title: Common Lisp Practicum Test
# Folder where the students should store their solutions
#+folder: ~/pt 

* Questions

** Question 1 :PENALTY 80 :Forbidden (count member)
 

**Part 1:** Write a function =count-occurrences= that takes an element
and a list as arguments and returns the number of times the element
appears in the list. 

# The instructor creates examples of how functions work by defining a DEFTEST
# structure in a org-mode EXAMPLE block as shown below. CodeGrader rewrites the
# the org-mode example block as follows. 
# For Example

#+begin_example
(deftest count-occurrences
  (count-occurrences 3 '(1 2 3 3 3 4)) 3
  (count-occurrences 'a '(a b a c a)) 3
  (count-occurrences 5 '(1 2 3 4)) 0)
#+end_example

# Is rewritten as

# #+BEGIN_EXAMPLE
# CL-USER> (COUNT-OCCURRENCES 3 '(1 2 3 3 3 4))
# 3
# CL-USER> (COUNT-OCCURRENCES 'A '(A B A C A))
# 3
# CL-USER> (COUNT-OCCURRENCES 5 '(1 2 3 4))
# 0
# #+END_EXAMPLE

# The instructor creates test cases which will be used for evaluating the students
# solutions by defining a DEFTEST structure in an TCS block as shown below. CodeGrader
# generates a file  ./Gen-files/Test-Cases/q1.lisp where 'i' is the question number contaning
# Lisps macros and functions that auto evaluate the student's code.
# For example: 

#+begin_tcs
(deftest count-occurrences
    (count-occurrences 1 '(1 1 1 1 1)) 5
    (count-occurrences 0 '(1 2 3 4)) 0
    (count-occurrences 'z '(a b c z z)) 2)
#+end_tcs

# Produces the following code in ./Gen-files/Test-Cases/q1.lisp

# (FORBIDDEN-SYMBOLS :PENALTY 0.8 :SYMBOLS '(COUNT MEMBER))
#
# (DEFTEST TEST-COUNT-OCCURRENCES NIL
#  (CHECK (EQUALP (COUNT-OCCURRENCES 1 '(1 1 1 1 1)) 5)
#   (EQUALP (COUNT-OCCURRENCES 0 '(1 2 3 4)) 0)
#   (EQUALP (COUNT-OCCURRENCES 'Z '(A B C Z Z)) 2)))
# 
# (DEFUN TEST-Q1 ()
#   (TEST-COUNT-OCCURRENCES)
#   (FMAKUNBOUND 'COUNT-OCCURRENCES))
#
# (TEST-Q1)

**Part 2:** Write a function =contains-all?= that takes two lists as
arguments and returns =T= if all elements of the first list are
contained in the second list, and =NIL= otherwise.

#+begin_example
(deftest contains-all
  (contains-all? '(1 2) '(1 2 3 4)) t
  (contains-all? '(1 5) '(1 2 3 4)) nil
  (contains-all? '() '(1 2 3)) t)
#+end_example

# Test cases
#+begin_tcs
(deftest contains-all
    (contains-all? '(a b) '(a b c d e)) t
    (contains-all? '(a z) '(a b c d)) nil
    (contains-all? '() '()) t)
#+end_tcs

** Question 2 

**Part 1:** Write a function =reverse-list= that takes a list as an
argument and returns a new list that is the reverse of the original
list. 

#+begin_example
(deftest reverse-list
  (reverse-list '(1 2 3 4)) '(4 3 2 1)
  (reverse-list '(a b c)) '(c b a)
  (reverse-list '()) '())
#+end_example

# Test cases
#+begin_tcs
(deftest reverse-list
    (reverse-list '(1 2 3 4 5)) '(5 4 3 2 1)
    (reverse-list '()) '()
    (reverse-list '(a b c)) '(c b a))
#+end_tcs

**Part 2:** Write a function =palindrome?= that takes a list as an
argument and returns =T= if the list is a palindrome (reads the same
forwards and backwards), and =NIL= otherwise. You may not use
=REVERSE= or =NREVERSE=.

#+begin_example
(deftest palindrome
  (palindrome? '(1 2 3 2 1)) t
  (palindrome? '(a b c d)) nil
  (palindrome? '()) t)
#+end_example

# Test cases
#+begin_tcs
(deftest palindrome
    (palindrome? '(x y x)) t
    (palindrome? '(x y z)) nil
    (palindrome? '()) t)
#+end_tcs

