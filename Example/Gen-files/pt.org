#+TITLE: Common Lisp Practicum Test
#+Options: toc:t num:t date:nil author:nil


* Question 1


** WHAT YOU ARE ASKED

*NOTE:* 

  - You are required to write the solutions for the parts of this question in the lisp program file *~/pt/q1.lisp* .
  - You may create helper functions in your program file. 
  - You must not use or refer to the following lisp built-in function(s)and symbol(s): *COUNT*, *MEMBER*.  The penalty for doing so is a deduction of *80 percent* on the score of your solutions for this question. 
  - To ensure your solution is in the correct folder and passes the test cases shown in the examples below,type the following expression on the REPL:
  #+BEGIN_SRC lisp
  (chk-my-solution "~/pt/q1.lisp")
  #+END_SRC

Write a function =count-occurrences= that takes an element
and a list as arguments and returns the number of times the element
appears in the list. For example:

#+BEGIN_SRC lisp
CL-USER> (COUNT-OCCURRENCES 3 '(1 2 3 3 3 4))
3
CL-USER> (COUNT-OCCURRENCES 'A '(A B A C A))
3
CL-USER> (COUNT-OCCURRENCES 5 '(1 2 3 4))
0
#+END_SRC

* Question 2


** WHAT YOU ARE ASKED

*NOTE:* 

  - You are required to write the solutions for the parts of this question in the lisp program file *~/pt/q2.lisp* .
  - You may create helper functions in your program file. 
  - You must not use or refer to the following lisp built-in function(s)and symbol(s): *COUNT*, *NUMBER*.  The penalty for doing so is a deduction of *80 percent* on the score of your solutions for this question. 
  - To ensure your solution is in the correct folder and passes the test cases shown in the examples below,type the following expression on the REPL:
  #+BEGIN_SRC lisp
  (chk-my-solution "~/pt/q2.lisp")
  #+END_SRC

Write a function =contains-all?= that takes two lists as
arguments and returns =T= if all elements of the first list are
contained in the second list, and =NIL= otherwise.

#+BEGIN_SRC lisp
CL-USER> (CONTAINS-ALL? '(1 2) '(1 2 3 4))
T
CL-USER> (CONTAINS-ALL? '(1 5) '(1 2 3 4))
NIL
CL-USER> (CONTAINS-ALL? 'NIL '(1 2 3))
T
#+END_SRC

* Question 3


** Part 1


** WHAT YOU ARE ASKED

*NOTE:* 

  - You are required to write the solutions for the parts of this question in the lisp program file *~/pt/q3.lisp* .
  - You may create helper functions in your program file. 
  - You must not use or refer to the following lisp built-in function(s)and symbol(s): *REVERSE*.  The penalty for doing so is a deduction of *80 percent* on the score of your solutions for this question. 
  - To ensure your solution is in the correct folder and passes the test cases shown in the examples below,type the following expression on the REPL:
  #+BEGIN_SRC lisp
  (chk-my-solution "~/pt/q3.lisp")
  #+END_SRC

Write a function =reverse-list= that takes a list as an
argument and returns a new list that is the reverse of the original
list. 

#+BEGIN_SRC lisp
CL-USER> (REVERSE-LIST '(1 2 3 4))
(4 3 2 1)
CL-USER> (REVERSE-LIST '(A B C))
(C B A)
CL-USER> (REVERSE-LIST 'NIL)
NIL
#+END_SRC

** Part 2


** WHAT YOU ARE ASKED

*NOTE:* 

  - You are required to write the solutions for the parts of this question in the lisp program file *~/pt/q3.lisp* .
  - You may create helper functions in your program file. 
  - You must not use or refer to the following lisp built-in function(s)and symbol(s): *REVERSE*.  The penalty for doing so is a deduction of *80 percent* on the score of your solutions for this question. 
  - To ensure your solution is in the correct folder and passes the test cases shown in the examples below,type the following expression on the REPL:
  #+BEGIN_SRC lisp
  (chk-my-solution "~/pt/q3.lisp")
  #+END_SRC

Write a function =palindrome?= that takes a list as an
argument and returns =T= if the list is a palindrome (reads the same
forwards and backwards), and =NIL= otherwise. You may not use
=REVERSE= or =NREVERSE=.

#+BEGIN_SRC lisp
CL-USER> (PALINDROME? '(1 2 3 2 1))
T
CL-USER> (PALINDROME? '(A B C D))
NIL
CL-USER> (PALINDROME? 'NIL)
T
#+END_SRC