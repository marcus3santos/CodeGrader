#+Options: toc:nil num:nil date:nil author:nil
#+Title: Common Lisp Practicum Test
# Folder where the students should store their solutions

** Question 1
 
*NOTE*:
- You are required to write the solutions for the parts of this question in the Lisp program file *~/pt/q1.lisp*
- You may create helper functions in your program file.
- You must not use or refer to the following Lisp built-in function(s) and symbol(s): *COUNT*, *MEMBER*. The penalty for doing so is a deduction of 80.0% on the score of your solutions for this question.
*WHAT YOU ARE ASKED*:


Write a function =count-occurrences= that takes an element
and a list as arguments and returns the number of times the element
appears in the list. For example:


#+BEGIN_EXAMPLE
CL-USER> (COUNT-OCCURRENCES 3 '(1 2 3 3 3 4))
3
CL-USER> (COUNT-OCCURRENCES 'A '(A B A C A))
3
CL-USER> (COUNT-OCCURRENCES 5 '(1 2 3 4))
0
#+END_EXAMPLE



** Question 2
 
*NOTE*:
- You are required to write the solutions for the parts of this question in the Lisp program file *~/pt/q2.lisp*
- You may create helper functions in your program file.
- You must not use or refer to the following Lisp built-in function(s) and symbol(s): *COUNT*, *MEMBER*. The penalty for doing so is a deduction of 80.0% on the score of your solutions for this question.
*WHAT YOU ARE ASKED*:


Write a function =contains-all?= that takes two lists as
arguments and returns =T= if all elements of the first list are
contained in the second list, and =NIL= otherwise.

#+BEGIN_EXAMPLE
CL-USER> (CONTAINS-ALL? '(1 2) '(1 2 3 4))
T
CL-USER> (CONTAINS-ALL? '(1 5) '(1 2 3 4))
NIL
CL-USER> (CONTAINS-ALL? 'NIL '(1 2 3))
T
#+END_EXAMPLE



** Question 3

*NOTE*:
- You are required to write the solutions for the parts of this question in the Lisp program file *~/pt/q3.lisp*
- You may create helper functions in your program file.
- You must not use or refer to the following Lisp built-in function(s) and symbol(s): *COUNT*, *MEMBER*. The penalty for doing so is a deduction of 80.0% on the score of your solutions for this question.
*WHAT YOU ARE ASKED*:


Write a function =reverse-list= that takes a list as an
argument and returns a new list that is the reverse of the original
list. 

#+BEGIN_EXAMPLE
CL-USER> (REVERSE-LIST '(1 2 3 4))
(4 3 2 1)
CL-USER> (REVERSE-LIST '(A B C))
(C B A)
CL-USER> (REVERSE-LIST 'NIL)
()
#+END_EXAMPLE


** Question 4

*NOTE*:
- You are required to write the solutions for the parts of this question in the Lisp program file *~/pt/q4.lisp*
- You may create helper functions in your program file.
- You must not use or refer to the following Lisp built-in function(s) and symbol(s): *COUNT*, *MEMBER*. The penalty for doing so is a deduction of 80.0% on the score of your solutions for this question.
*WHAT YOU ARE ASKED*:


Write a function =palindrome?= that takes a list as an
argument and returns =T= if the list is a palindrome (reads the same
forwards and backwards), and =NIL= otherwise. You may not use
=REVERSE= or =NREVERSE=.

#+BEGIN_EXAMPLE
CL-USER> (PALINDROME? '(1 2 3 2 1))
T
CL-USER> (PALINDROME? '(A B C D))
NIL
CL-USER> (PALINDROME? 'NIL)
T
#+END_EXAMPLE



